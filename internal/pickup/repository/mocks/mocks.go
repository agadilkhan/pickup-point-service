// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/agadilkhan/pickup-point-service/internal/pickup/entity"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *Repository) CreateOrder(ctx context.Context, order *entity.Order) (int, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) (int, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) int); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePickupOrder provides a mock function with given fields: ctx, pickup
func (_m *Repository) CreatePickupOrder(ctx context.Context, pickup *entity.PickupOrder) (int, error) {
	ret := _m.Called(ctx, pickup)

	if len(ret) == 0 {
		panic("no return value specified for CreatePickupOrder")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.PickupOrder) (int, error)); ok {
		return rf(ctx, pickup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.PickupOrder) int); ok {
		r0 = rf(ctx, pickup)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.PickupOrder) error); ok {
		r1 = rf(ctx, pickup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCompanies provides a mock function with given fields: ctx
func (_m *Repository) GetAllCompanies(ctx context.Context) (*[]entity.Company, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCompanies")
	}

	var r0 *[]entity.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]entity.Company, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]entity.Company); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCustomers provides a mock function with given fields: ctx
func (_m *Repository) GetAllCustomers(ctx context.Context) (*[]entity.Customer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomers")
	}

	var r0 *[]entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]entity.Customer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]entity.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompanyByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetCompanyByID(ctx context.Context, id int) (*entity.Company, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCompanyByID")
	}

	var r0 *entity.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Company, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Company); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetCustomerByID(ctx context.Context, id int) (*entity.Customer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByID")
	}

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Customer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Customer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByCode provides a mock function with given fields: ctx, code
func (_m *Repository) GetOrderByCode(ctx context.Context, code string) (*entity.Order, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByCode")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Order, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Order); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, sort, direction
func (_m *Repository) GetOrders(ctx context.Context, sort string, direction string) (*[]entity.Order, error) {
	ret := _m.Called(ctx, sort, direction)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 *[]entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*[]entity.Order, error)); ok {
		return rf(ctx, sort, direction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *[]entity.Order); ok {
		r0 = rf(ctx, sort, direction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, sort, direction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPickupOrderByID provides a mock function with given fields: ctx, userID, pickupOrderID
func (_m *Repository) GetPickupOrderByID(ctx context.Context, userID int, pickupOrderID int) (*entity.PickupOrder, error) {
	ret := _m.Called(ctx, userID, pickupOrderID)

	if len(ret) == 0 {
		panic("no return value specified for GetPickupOrderByID")
	}

	var r0 *entity.PickupOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*entity.PickupOrder, error)); ok {
		return rf(ctx, userID, pickupOrderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *entity.PickupOrder); ok {
		r0 = rf(ctx, userID, pickupOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PickupOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userID, pickupOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPickupOrders provides a mock function with given fields: ctx, userID
func (_m *Repository) GetPickupOrders(ctx context.Context, userID int) (*[]entity.PickupOrder, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPickupOrders")
	}

	var r0 *[]entity.PickupOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*[]entity.PickupOrder, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *[]entity.PickupOrder); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.PickupOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, order
func (_m *Repository) UpdateOrder(ctx context.Context, order *entity.Order) (*entity.Order, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) (*entity.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) *entity.Order); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
